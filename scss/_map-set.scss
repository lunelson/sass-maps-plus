@function map-set-nested($map, $keys-and-value...) {
  @if type-of($map) != 'map' {
    @return error('argument $map in map-set-nested($map, $keys...) is not a map');
  }
  @if length($keys-and-value) == 0 {
    @return error('rest-argument $keys-and-value in map-set-nested($map, $keys-and-value...) not provided');
  }
  $keys-and-value-length: length($keys-and-value);
  $key-length: $keys-and-value-length - 1;
  $value: nth($keys-and-value, $keys-and-value-length);
  $value-is-map: type-of($value) == 'map';

  @if $key-length == 0 {
    @return error('at least one $key required in map-set-nested($map, $keys-and-value...)');
  } @else {
    @for $i from 1 through $key-length {
      $new: (nth($keys-and-value, $keys-and-value-length - $i): $value);
      $old: if($i == $key-length, $map, map-get-nested($map, --smp-list-slice($keys-and-value, 1, $key-length - $i)...) or ());
      $value: if(type-of($old) == 'map', map-merge($old, $new), $new);
    }
  }

  @return $value;
}
