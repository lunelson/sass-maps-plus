@function map-merge-nested($map1, $keys-and-map2...) {
  @if type-of($map1) != 'map' {
    @return error('argument $map1 in map-merge-nested($map1, $keys...) is not a map');
  }
  @if length($keys-and-map2) == 0 {
    @return error('rest-argument $keys-and-map2 in map-merge-nested($map1, $keys-and-map2...) not provided');
  }
  $keys-and-map2-length: length($keys-and-map2);
  $key-length: $keys-and-map2-length - 1;
  $value: nth($keys-and-map2, $keys-and-map2-length);
  $value-is-map: type-of($value) == 'map';

  @if $key-length == 0 {
    $value: map-merge($map1, if($value-is-map or length($value) == 0, $value, ($value: ())));
  } @else {
    @for $i from if($value-is-map, 0, 1) through $key-length {
      $new: if($i == 0, $value, (nth($keys-and-map2, $keys-and-map2-length - $i): $value));
      $old: if($i == $key-length, $map1, map-get-nested($map1, --smp-list-slice($keys-and-map2, 1, $key-length - $i)...) or ());
      $value: if(type-of($old) == 'map', map-merge($old, $new), $new);
    }
  }

  @return $value;
}
