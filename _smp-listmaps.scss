//  _ _     _
// | (_)   | |
// | |_ ___| |_ ______ _ __ ___   __ _ _ __  ___
// | | / __| __|______| '_ ` _ \ / _` | '_ \/ __|
// | | \__ \ |_       | | | | | | (_| | |_) \__ \
// |_|_|___/\__|      |_| |_| |_|\__,_| .__/|___/
//                                    | |
//                                    |_|

/// Return list-map from `$list` and ensure input list-map is list-of-lists
/// @access public
/// @group list-map
/// @param {List} $list
/// @return {List-map}
@function list-map-check($list) {
  @if length($list) == 2 and length(nth($list, 1)) == 1 {
    @return append((), $list, 'comma');
  }

  @return $list;
}


/// Return comma-separated list of keys from list-map
/// Conformant with Ruby Sass `map-keys()`
/// @access public
/// @group list-map
/// @param {Arglist} $list - List-map
/// @return {List}
/// @require {function} list-map-check
/// @require {function} tuple-key
@function list-map-keys($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: ();

  @each $tuple in $list {
    $output: append($output, tuple-key($tuple), 'comma');
  }

  @return $output;
}


/// Return comma-separated list of values from list-map
/// Conformant with Ruby Sass `map-values()`
/// @access public
/// @group list-map
/// @param {Arglist} $list - List-map
/// @return {List}
/// @require {function} list-map-check
/// @require {function} tuple-value
@function list-map-values($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: ();

  @each $tuple in $list {
    $output: append($output, tuple-value($tuple), 'comma');
  }

  @return $output;
}


/// Check whether key exists in list-map at root level
/// Conformant with Ruby Sass `map-has-key()`
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {*} $key - Key to check
/// @return {Bool}
/// @require {function} list-map-check
/// @require {function} tuple-key
@function list-map-has-key($list, $key) {
  $list: list-map-check($list);

  @each $tuple in $list {
    @if tuple-key($tuple) == $key {
      @return true;
    }
  }

  @return false;
}


/// Return value corresponding to key in list-map
/// Conformant with Ruby Sass `map-get()`
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {*} $key - Key to fetch
/// @return {*} - Value mapped to `$key`
/// @require {function} list-map-check
/// @require {function} tuple-key
/// @require {function} tuple-value
@function list-map-get($list, $key) {
  $list: list-map-check($list);

  @each $tuple in $list {
    @if tuple-key($tuple) == $key {
      @return tuple-value($tuple);
    }
  }

  @return null;
}


/// Return a merge of second list-map in to first list-map
/// Conformant with Ruby Sass `map-merge()`
/// @access public
/// @group list-map
/// @param {List-map} $list1 - First list-map
/// @param {List-map} $list2 - Second list-map
/// @return {List-map}
/// @require {function} list-map-check
/// @require {function} list-map-keys
/// @require {function} tuple-key
@function list-map-merge($list1, $list2) {
  $list1: list-map-check($list1);
  $list2: list-map-check($list2);
  $keys1: list-map-keys($list1);

  @each $tuple in $list2 {
    $index: index($keys1, tuple-key($tuple));

    @if $index {
      $list1: set-nth($list1, $index, $tuple);
    } @else {
      $list1: append($list1, $tuple, 'comma');
    }
  }

  @return $list1;
}


/// Return list-map with tuples removed, according to keys (if found)
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {Arglist} $keys - Keys to remove from `$list`
/// @return {List-map}
/// @require {function} list-map-check
/// @require {function} tuple-key
@function list-map-remove($list, $keys...) {
  $list: list-map-check($list);
  $output: ();

  @each $tuple in $list {
    @if not index($keys, tuple-key($tuple)) {
      $output: append($output, $tuple, 'comma');
    }
  }

  @return $output;
}


/// A *deep*, nested or chained version of `map-get()`
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {Arglist} $keys - Keys to fetch
/// @return {*}
/// @require {function} list-map-get
@function list-map-get-nested($list, $keys...) {
  @each $key in $keys {
    @if type-of($list) != 'list' {
      @return $list;
    }

    $list: list-map-get($list, $key);
  }

  @return $list;
}


/// A *deep*, nested or chained version of `map-merge`; offers `map-set` syntax too
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {Arglist} $args
/// @return {List-map}
/// @require {function} list-map-check
/// @require {function} list-map-merge
/// @require {function} list-map-get-nested
/// @require {function} slice
@function list-map-merge-nested($list, $kv...) {
  $list: list-map-check($list);
  $kv-length: length($kv);
  $key-length: $kv-length - 1;
  $value: nth($kv, $kv-length);
  $value-is-list: type-of($value) == 'list';

  @if $key-length == 0 {
    $value: list-map-merge($list, if($value-is-list, $value, append((), $value (), 'comma')));
  } @else {
    @for $i from if($value-is-list, 0, 1) through $key-length {
      $new: if($i == 0, $value, append((), nth($kv, $kv-length - $i) $value, 'comma'));
      $old: if($i == $key-length, $list, list-map-get-nested($list, slice($kv, 1, $key-length - $i)...) or ());
      $value: if(type-of($old) == 'list', list-map-merge($old, $new), $new);
    }
  }

  @return $value;
}




/// Return previous key from list-map
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {*} $key - Pivot key
/// @return {*}
/// @require {function} list-map-check
/// @require {function} list-map-keys
@function list-map-prev-key($list, $key) {
  $list: list-map-check($list);
  $keys: list-map-keys($list);

  @return nth($keys, index($keys, $key) - 1);
}


/// Return next key from list-map
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map
/// @param {*} $key - Pivot key
/// @return {*}
/// @require {function} list-map-check
/// @require {function} list-map-keys
@function list-map-next-key($list, $key) {
  $list: list-map-check($list);
  $keys: list-map-keys($list);

  @return nth($keys, index($keys, $key) + 1);
}


/// Return the string representation of a list-map
/// @access public
/// @group list-map
/// @param {Arglist} $list - List-map to inspect
/// @return {String}
/// @require {function} list-map-check
/// @require {function} list-map-keys
/// @require {function} list-map-inspect
/// @require {function} tuple-key
/// @require {function} tuple-values
@function list-map-inspect($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: '(';
  $i: 1;

  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    } @else {
      $key: tuple-key($tuple);
      $value: tuple-value($tuple);
      $output: $output + '#{$key} ' + if(type-of($value) == 'list', '#{list-map-inspect($value)}', '#{$value}');
    }

    @if $i < length(list-map-keys($list)) {
      $output: $output + ', ';
    }

    $i: $i + 1;
  }

  @return $output + ')';
}


/// Return the string representation of a list-map with indents and line breaks
/// @access public
/// @group list-map
/// @param {List-map} $list - List-map to inspect
/// @param {Number} $level [1] - Internal variable, **do not edit**
/// @require {function} list-map-check
/// @require {function} list-map-keys
@function list-map-pretty($list, $level: 1) {
  $tab: '  ';
  $cr: '
';
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $indent: $tab; $outdent: $tab;

  @for $n from 1 through $level {
    $indent: $indent + $tab;
  }

  @for $n from 1 through $level - 1 {
    $outdent: $outdent + $tab;
  }

  $output: '(' + $cr + $indent;
  $i: 1;

  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    } @else {
      $key: nth($tuple, 1); $value: nth($tuple, 2);
      @if type-of($value) == 'list' {
        $output: $output + '#{$key} #{list-map-pretty($value, $level+1)}';
      } @else {
        $output: $output + '#{$key} #{$value}';
      }
    }

    @if $i < length(list-map-keys($list)) {
      $output: $output + ',' + $cr + $indent;
    }

    $i: $i + 1;
  }

  @return $output + $cr + $outdent + ')';
}


/// Global sort direction: either `asc` or `desc`
/// @access public
/// @group list-map
$list-map-sort-dir: 'asc';


/// Return sorted list-map, based on values at given key(s)
/// @access public
/// @group list-map
/// @param {List-map} $list-map - List-map to sort
/// @param {Arglist} $keys - Keys to use for sorting
/// @return {List-map}
/// @require {function} list-map-check
/// @require {function} list-map-get-nested
@function list-map-sort($list-map, $keys...) {
  @if length($keys) < 1 {
    @return $list-map;
  }

  $list-map: list-map-check($list-map);

  @if length($list-map) > 1 {
    $less: ();
    $equal: ();
    $greater: ();
    $seed: nth($list-map, ceil(length($list-map) / 2));
    $seed-value: list-map-get-nested(nth($seed, 2), $keys...);

    @each $item in $list-map {
      $item-value: list-map-get-nested(nth($item, 2), $keys...);

      @if $list-map-sort-dir == 'asc' {
        @if $item-value == $seed-value {
          $equal: append($equal, $item, 'comma');
        } @else if $item-value < $seed-value {
          $less: append($less, $item, 'comma');
        } @else {
          $greater: append($greater, $item, 'comma');
        }
      } @else {
        @if $item-value == $seed-value {
          $equal: append($equal, $item, 'comma');
        } @else if $item-value > $seed-value {
          $less: append($less, $item, 'comma');
        } @else {
          $greater: append($greater, $item, 'comma');
        }
      }
    }

    @return join(join(map-sort($less, $keys...), $equal), list-map-sort($greater, $keys...));
  }

  @return $list-map;
}


/// Return JSON string representation of a list-map
/// @access public
/// @group list-map
/// @param {Arglist} $list - List-map
/// @return {String} - JSON string
/// @require {function} list-map-check
/// @require {function} list-map-keys
@function list-map-json($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: '{ ';
  $i: 1;

  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    } @else {
      $key: nth($tuple, 1);
      $value: nth($tuple, 2);

      @if type-of($value) == 'list' {
        $output: $output + '"#{$key}": #{list-map-json($value)}';
      } @else if type-of($value) == 'number' {
        $value: if(unitless($value), $value, '"#{$value}"');
        $output: $output + '"#{$key}": #{$value}';
      } @else {
        $value: if(type-of($value) == 'bool', $value, '"#{$value}"');
        $output: $output + '"#{$key}": #{$value}';
      }
    }

    @if $i < length(list-map-keys($list)) {
      $output: $output + ', ';
    }

    $i: $i + 1;
  }

  @return $output + ' }';
}
