@import '../../index';

@include init-media-alt(false);

@function grid-width-calc($mult: 1, $m: $curr-medium-key) {
  @return add-calc((medium-value('content-width', $m) or 100%), medium-value('margin-x', $m) * $mult);
}

@function span-width-calc($n: 1, $mult: 1, $m: $curr-medium-key) {
  @return mul-calc(div-calc(grid-width-calc($mult, $m), medium-value('grid-columns', $m)), $n);
}

@mixin cell($mult: null) {
  display: inline-block;
  direction: rtl;
  vertical-align: top;
  min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
  font-size: 1rem;
  width: 100%;

  $gutter: if($mult, margin-x($mult), null);
  padding-right: if($gutter, $gutter/2, null);
  padding-left: if($gutter, $gutter/2, null);
}

@mixin grid($mult: null, $opts: null, $cell: '*') {
  @if type-of($opts) == 'map' { @include grid($mult, $opts...); }
  @else {

    display: block;
    font-size: 0rem;

    $gutter: if($mult, margin-x($mult), null);
    width: if($gutter, add-calc(100%, $gutter), null);
    margin-right: if($gutter, $gutter/-2, null);
    margin-left: if($gutter, $gutter/-2, null);
    @if $cell { & > #{$cell} { @include cell($mult); } }
  }
}

@mixin re-grid($mult: null, $opts: null, $span: 1, $left: 0, $cell: '*'){
  @if type-of($opts) == 'map' { @include re-grid($mult, $opts...); }
  @else {

    display: block;
    font-size: 0rem;

    $gutter: if($mult, margin-x($mult), null);
    $grid-margin: div-calc($gutter, -2);
    $span-width: add-calc(100%, $gutter);
    $cols: _nth($span, 2) or medium-value('grid-columns') or 4;
    $right: $cols - $left - $span;
    width: mul-calc($span-width, $cols);
    margin-left: sub-calc($grid-margin, if($left == 0, 0, mul-calc($span-width, $left)));
    margin-right: sub-calc($grid-margin, if($right == 0, 0, mul-calc($span-width, $right)));
    @if $cell { & > #{$cell} { @include cell($mult); } }
  }
}

@mixin un-grid($mult: null, $opts: null, $span: 1, $left: 0, $cell: '*'){
  @if type-of($opts) == 'map' { @include un-grid($mult, $opts...); }
  @else {

    display: block;
    $gutter: if($mult, margin-x($mult), null);
    $grid-margin: div-calc($gutter, -2);
    $span-width: add-calc(100%, $gutter);
    $cols: _nth($span, 2) or medium-value('grid-columns') or 4;
    $right: $cols - $left - $span;
    width: mul-calc($span-width, $cols);
    margin-left: sub-calc($grid-margin, if($left == 0, 0, mul-calc($span-width, $left)));
    margin-right: sub-calc($grid-margin, if($right == 0, 0, mul-calc($span-width, $right)));
    padding-right: if($gutter, $gutter/2, null);
    padding-left: if($gutter, $gutter/2, null);
  }
}

.grid { @include grid(1); }
.re-grid { @include re-grid(1, (span: 1, left: 2)); }
.un-grid { @include un-grid(1, (span: 1, left: 2)); }


/*

@include grid($m, (cell: '.joe', cols: 2))

@include grid($mult)
  @include cell($mult)
    // reset to full-width grid; next child can be a .cell
    @include re-grid($mult, $span, $left)

@include grid($mult)
  @include cell($mult)
    // reset to a full-width cell
    @include un-cell($mult, $span, $left)

 */

