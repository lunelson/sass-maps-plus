@import '../../index';

@include init-media-alt(false);

//////////
// grid //
//////////

  @mixin cell($mult: null) {
    display: block;
    float: left;
    min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
    background-clip: content-box;

    $gutter: if($mult!=false, margin-x($mult), $mult);
    padding-right: if($gutter, $gutter/2, null);
    padding-left: if($gutter, $gutter/2, null);
  }

  @mixin grid($mult: null, $cell: '*') {
    @if type-of($mult) == 'map' { @include grid($mult...); }
    @else {
      display: block;
      position: relative; // for 'out' positioned cells which are absolute

      $gutter: if($mult!=false, margin-x($mult), null);
      width: if($gutter, add-calc(100%, $gutter), null);
      margin-right: if($gutter, $gutter/-2, null);
      margin-left: if($gutter, $gutter/-2, null);
      @if $cell { & > #{$cell} { @include cell($mult); } }
    }
  }

  @mixin re-grid($mult: null, $span: 1, $left: 0, $cell: '*'){
    @if type-of($mult) == 'map' { @include re-grid($mult...); }
    @else {

      display: block;
      position: relative; // for 'out' positioned cells which are absolute

      $gutter: if($mult!=false, margin-x($mult), null);
      $grid-margin: div-calc($gutter, -2);
      $span-width: add-calc(100%, $gutter);
      $cols: _nth($span, 2) or medium-value('grid-columns') or 4;
      $right: $cols - $left - $span;
      width: mul-calc($span-width, $cols);
      margin-left: sub-calc($grid-margin, if($left == 0, 0, mul-calc($span-width, $left)));
      margin-right: sub-calc($grid-margin, if($right == 0, 0, mul-calc($span-width, $right)));
      @if $cell { & > #{$cell} { @include cell($mult); } }
    }
  }

/////////////////////
// fgrid (flexbox) //
/////////////////////

  @mixin fcell($mult: null) {
    flex: 1 1 auto;
    width: 0%;
    background-clip: content-box;
    min-width: 0%; // https://css-tricks.com/flexbox-truncated-text/

    $gutter: if($mult!=false, margin-x($mult), $mult);
    padding-right: if($gutter, $gutter/2, null);
    padding-left: if($gutter, $gutter/2, null);
  }

  @mixin fgrid($mult: null, $cell: '*') {
    @if type-of($mult) == 'map' { @include grid($mult...); }
    @else {
      display: flex;
      flex-wrap: wrap;
      position: relative; // for 'out' positioned cells which are absolute

      $gutter: if($mult!=false, margin-x($mult), $mult);
      width: if($gutter, calc(100% + #{$gutter}), null);
      margin-right: if($gutter, $gutter/-2, null);
      margin-left: if($gutter, $gutter/-2, null);
      @if $cell { & > #{$cell} { @include fcell($mult); } }
    }
  }

  @mixin re-fgrid($mult: null, $span: 1, $left: 0, $cell: '*'){
    @if type-of($mult) == 'map' { @include re-grid($mult...); }
    @else {
      display: flex;
      flex-wrap: wrap;
      position: relative; // for 'out' positioned cells which are absolute

      $gutter: if($mult!=false, margin-x($mult), null);
      $grid-margin: div-calc($gutter, -2);
      $span-width: add-calc(100%, $gutter);
      $cols: _nth($span, 2) or medium-value('grid-columns') or 4;
      $right: $cols - $left - $span;
      width: mul-calc($span-width, $cols);
      margin-left: sub-calc($grid-margin, if($left == 0, 0, mul-calc($span-width, $left)));
      margin-right: sub-calc($grid-margin, if($right == 0, 0, mul-calc($span-width, $right)));
      @if $cell { & > #{$cell} { @include fcell($mult); } }
    }
  }

//////////////////////////
// igrid (inline-block) //
//////////////////////////

  @mixin icell($mult: null) {
    display: inline-block;
    direction: rtl;
    vertical-align: top;
    min-height: 1px; // http://css-tricks.com/make-sure-columns-dont-collapse-horizontally/
    font-size: 1rem;
    width: 100%;
    background-clip: content-box;

    $gutter: if($mult!=false, margin-x($mult), $mult);
    padding-right: if($gutter, $gutter/2, null);
    padding-left: if($gutter, $gutter/2, null);
  }

  @mixin igrid($mult: null, $cell: '*') {
    @if type-of($mult) == 'map' { @include grid($mult...); }
    @else {
      display: block;
      font-size: 0rem;
      position: relative; // for 'out' positioned cells which are absolute

      $gutter: if($mult!=false, margin-x($mult), null);
      width: if($gutter, add-calc(100%, $gutter), null);
      margin-right: if($gutter, $gutter/-2, null);
      margin-left: if($gutter, $gutter/-2, null);
      @if $cell { & > #{$cell} { @include icell($mult); } }
    }
  }

  @mixin re-igrid($mult: null, $span: 1, $left: 0, $cell: '*'){
    @if type-of($mult) == 'map' { @include re-grid($mult...); }
    @else {

      display: block;
      font-size: 0rem;
      position: relative; // for 'out' positioned cells which are absolute

      $gutter: if($mult!=false, margin-x($mult), null);
      $grid-margin: div-calc($gutter, -2);
      $span-width: add-calc(100%, $gutter);
      $cols: _nth($span, 2) or medium-value('grid-columns') or 4;
      $right: $cols - $left - $span;
      width: mul-calc($span-width, $cols);
      margin-left: sub-calc($grid-margin, if($left == 0, 0, mul-calc($span-width, $left)));
      margin-right: sub-calc($grid-margin, if($right == 0, 0, mul-calc($span-width, $right)));
      @if $cell { & > #{$cell} { @include icell($mult); } }
    }
  }

/////////////
// un-grid //
/////////////

  @mixin un-grid($mult: null, $span: 1, $left: 0, $cell: '*'){
    @if type-of($mult) == 'map' { @include un-grid($mult...); }
    @else {

      display: block;
      $gutter: if($mult!=false, margin-x($mult), null);
      $grid-margin: div-calc($gutter, -2);
      $span-width: add-calc(100%, $gutter);
      $cols: _nth($span, 2) or medium-value('grid-columns') or 4;
      $right: $cols - $left - $span;
      width: mul-calc($span-width, $cols);
      margin-left: sub-calc($grid-margin, if($left == 0, 0, mul-calc($span-width, $left)));
      margin-right: sub-calc($grid-margin, if($right == 0, 0, mul-calc($span-width, $right)));
      padding-right: if($gutter, $gutter/2, null);
      padding-left: if($gutter, $gutter/2, null);
    }
  }

//////////////////////
// cell (all types) //
//////////////////////

  // master mixin
  @mixin cell-posn($span: null, $push: null, $right: null, $left: null, $out: null) {
    @if type-of($push) == 'map' { @include cell-posn($span, $push...); }
    @else {
      $n: nth($span, 1) or medium-value('type-columns') or 4;
      $d: _nth($span, 2) or medium-value('grid-columns') or 4;
      flex-grow: 0;
      width: $n / $d * 100%;
      @if $right { margin-right: nth($right, 1) / (_nth($right, 2) or $d) * 100%; }
      @if $left { margin-left: nth($left, 1) / (_nth($left, 2) or $d) * 100%; }
      @else if $out {
        $side: map-get($out, (left: right, right: left));
        position: absolute; #{($side)}: 100%; top: auto;
      }
    }
  }

  // span only
  @mixin cell-span($span: null) {
    $n: nth($span, 1) or medium-value('type-columns') or 4;
    $d: _nth($span, 2) or medium-value('grid-columns') or 4;
    flex-grow: 0;
    width: $n / $d * 100%;
  }

  // push only
  @mixin cell-push($push: null, $right: null, $left: null, $out: null) {
    @if type-of($push) == 'map' { @include cell-push($push...); }
    @else {
      $d: medium-value('grid-columns') or 4;
      @if $right { margin-right: nth($right, 1) / (_nth($right, 2) or $d) * 100%; }
      @if $left { margin-left: nth($left, 1) / (_nth($left, 2) or $d) * 100%; }
      @else if $out {
        $side: map-get($out, (left: right, right: left));
        position: absolute; #{($side)}: 100%; top: auto;
      }
    }
  }

.calc-test {
  add: add-calc(2rem, 0);
  sub: sub-calc(2rem, 0);
  mul: mul-calc(2, 0);
  div: div-calc(2, 2);
}

// test inline block

.igrid--null { @include igrid(false); }
// .igrid { @include igrid(); }
// .re-igrid { @include re-igrid(); }
// .un-igrid { @include un-grid(); }

// test flexbox

.fgrid--null { @include fgrid(false); }
// .fgrid { @include fgrid(); }
// .re-fgrid { @include re-fgrid(); }
// .un-fgrid { @include un-grid(); }

// test block float

.grid--null { @include grid(false); }
// .grid { @include grid(); }
// .re-grid { @include re-grid(); }
// .un-grid { @include un-grid(); }
