@import '../../index';

@function add($calc1, $calc2){
  @if not $calc1 { @return $calc2; }
  @if not $calc2 { @return $calc1; }
  @if add-check($calc1, $calc2) { @return $calc1 + $calc2; }
  @return unquote('calc(#{pre-calc($calc1)} + #{pre-calc($calc2)})');
}

@function subtract($calc1, $calc2){
  @if not $calc1 { @return $calc2; }
  @if not $calc2 { @return $calc1; }
  @if add-check($calc1, $calc2) { @return $calc1 - $calc2; }
  @return unquote('calc(#{pre-calc($calc1)} - #{pre-calc($calc2)})');
}

@function multiply($calc, $n){
  @if not $n or type-of($n) != 'number' { @return $calc; }
  @if mul-check($calc, $n) { @return $calc * $n; }
  @return unquote('calc(#{pre-calc($calc)} * #{$n})');
}

@function divide($calc, $n){
  @if $n == 0 { @error 'divide: attempt to divide by zero'; }
  @if not $n or type-of($n) != 'number' { @return $calc; }
  @if div-check($calc, $n) { @return $calc / $n; }
  @return unquote('calc(#{pre-calc($calc)} / #{$n})');
}

.test {
  /*


  ADD / SUB
  */
  /* add/sub: a or b unitless, or a b units match */
  add: inspect(1 + 2em);
  /* add/sub: a or b unitless, or a b units match */
  add: inspect(1em + 2);
  /* add/sub: a or b unitless, or a b units match */
  add: inspect(1em + 2em);
  /* add/sub: a or b unitless, or a b units match */
  sub: inspect(1 - 2em);
  /* add/sub: a or b unitless, or a b units match */
  sub: inspect(1em - 2);
  /* add/sub: a or b unitless, or a b units match */
  sub: inspect(1em - 2em);
  /* add/sub: a or b unitless, or a b units match */
  add: add-check(1, 2em);
  /* add/sub: a or b unitless, or a b units match */
  add: add-check(1em, 2);
  /* add/sub: a or b unitless, or a b units match */
  add: add-check(1em, 2em);
  /* add/sub: a or b unitless, or a b units match */
  sub: add-check(1, 2em);
  /* add/sub: a or b unitless, or a b units match */
  sub: add-check(1em, 2);
  /* add/sub: a or b unitless, or a b units match */
  sub: add-check(1em, 2em);
  /*


  MUL
  */
  /* mult: a or b must be unitless, or both */
  mul: inspect(1 * 2em);
  /* mult: a or b must be unitless, or both */
  mul: inspect(1em * 2);
  /* mult: a or b must be unitless, or both */
  mul: inspect(1 * 2);
  /* mult: a or b must be unitless, or both (FAIL) */
  mul: inspect(1em * 2em);
  /* mult: a or b must be unitless, or both */
  mul: mul-check(1, 2em);
  /* mult: a or b must be unitless, or both */
  mul: mul-check(1em, 2);
  /* mult: a or b must be unitless, or both */
  mul: mul-check(1, 2);
  /* mult: a or b must be unitless, or both (FAIL) */
  mul: mul-check(1em, 2em);
  /*


  DIV
  */
  /* div: b must be unitless, or both */
  div: inspect(1em / 2);
  /* div: b must be unitless, or both */
  div: inspect(1 / 2);
  /* div: b must be unitless, or both (FAIL)*/
  div: inspect(1 / 2em);
  /* div: b must be unitless, or both */
  div: div-check(1em, 2);
  /* div: b must be unitless, or both */
  div: div-check(1, 2);
  /* div: b must be unitless, or both (FAIL)*/
  div: div-check(1, 2em);
}

.hello-world {
  test: subtract(1.5em, 1em);
  test: subtract(1.5em, 1rem);
  test: divide(subtract(1.5em, 1em), 2);
  test: subtract(divide(subtract(1.5em, 1em), 2), add(1em, 1ex));
}
