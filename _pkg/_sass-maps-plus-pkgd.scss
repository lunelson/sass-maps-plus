
@function slice($list, $start: 1, $end: length($list), $separator: list-separator($list)) {
  $output: ();
  @if $start >= 1 and $end >= $start {
    @for $i from $start through $end {
      $output: append($output, nth($list, $i), $separator);
    }
  }
  @return $output;
}
@function tuple-key($tuple) {
  @if length($tuple) < 1 {
    @return null;
  }
  @return nth($tuple, 1);
}
@function tuple-value($tuple) {
  @if length($tuple) < 2 {
    @return null;
  }
  @return slice($tuple, 2, length($tuple));
}
@function str-multiply($string, $n) {
  $output: '';
  @if $n > 0 {
    @for $i from 1 through $n {
      $output: $output + $string;
    }
  }
  @return $output;
}

@function map-prev-key($map, $key) {
  $keys: map-keys($map);
  $index: index($keys, $key) - 1;
  @return if($index >= 1, nth($keys, $index), null);
}
@function map-next-key($map, $key) {
  $keys: map-keys($map);
  $index: index($keys, $key) + 1;
  @return if($index <= length($keys), nth($keys, $index), null);
}
@function map-get-all($map, $keys...) {
  $out:();
  @each $key in $keys {
    $value: map-get($map, $key);
    $out: if($value, append($out, $value), $out);
  }
  @return if($out != (), $out, null);
}
@function map-get-any($map, $keys...) {
  @each $key in $keys {
    $value: map-get($map, $key);
    @if $value { @return $value; }
  }
  @return null;
}
@function map-get-nested($map, $keys...) {
  @if length($map) == 0 { @return null; }
  @each $key in $keys {
    @if type-of($map) != 'map' {
      @return $map;
    }
    $map: map-get($map, $key);
  }
  @return $map;
}
@function map-merge-nested($map, $keys-and-value...) {
  $keys-and-value-length: length($keys-and-value);
  $key-length: $keys-and-value-length - 1;
  $value: nth($keys-and-value, $keys-and-value-length);
  $value-is-map: type-of($value) == 'map';
  @if $key-length == 0 {
    $value: map-merge($map, if($value-is-map or length($value) == 0, $value, ($value: ())));
  } @else {
    @for $i from if($value-is-map, 0, 1) through $key-length {
      $new: if($i == 0, $value, (nth($keys-and-value, $keys-and-value-length - $i): $value));
      $old: if($i == $key-length, $map, map-get-nested($map, slice($keys-and-value, 1, $key-length - $i)...) or ());
      $value: if(type-of($old) == 'map', map-merge($old, $new), $new);
    }
  }
  @return $value;
}
@function map-inspect($map, $level: 1) {
  $tab: '  ';
  $cr: '
';
  @if type-of($map) != 'map' {
    @return '#{inspect($map)}';
  }
  $indent: str-multiply($tab, $level + 1);
  $output: '(' + $cr + $indent; $i: 1;
  @each $key, $value in $map {
    @if type-of($value) == 'map' {
      $output: $output + '#{$key}: #{map-inspect($value, $level+1)}';
    } @else {
      $output: $output + '#{$key}: #{$value}';
    }
    @if $i < length(map-keys($map)) {
      $output: $output + ',' + $cr + $indent;
    }
    $i: $i + 1;
  }
  $outdent: str-multiply($tab, $level);
  @return $output + $cr + $outdent + ')';
}

@function maps-collect($maps, $keys...) {
  @if length($keys) == 0 { @return $maps; }
  @if length($maps) == 0 { @return $maps; }
  $collector: ();
  $map-of-maps: type-of($maps) == 'map';
  @if $map-of-maps {
    @each $key, $map in $maps {
      $curr-value: map-get-nested($map, $keys...);
      @if $curr-value { $collector: map-merge($collector, ($key: $map)); }
    }
    @return $collector;
  } @else {
    @each $map in $maps {
      $curr-value: map-get-nested($map, $keys...);
      @if $curr-value { $collector: append($collector, $map); }
    }
    @return $collector;
  }
}
$maps-sort-dir: 'asc';
@function maps-sort($maps, $keys...) {
  @if length($keys) == 0 { @return $maps; }
  @if length($maps) > 1 {
    $less: ();
    $equal: ();
    $greater: ();
    $map-of-maps: type-of($maps) == 'map';
    @if $map-of-maps {
      $seed-map: nth(nth($maps, ceil(length($maps) / 2)), 2);
      $seed-value: map-get-nested($seed-map, $keys...);
      @each $key, $map in $maps {
        $curr-value: map-get-nested($map, $keys...);
        @if $curr-value == $seed-value {
          $equal: map-merge($equal, ($key: $map));
        } @else if $curr-value < $seed-value {
          @if $maps-sort-dir == 'asc' {
            $less: map-merge($less, ($key: $map));
          } @else {
            $greater: map-merge($greater, ($key: $map));
          }
        } @else {
          @if $maps-sort-dir == 'asc' {
            $greater: map-merge($greater, ($key: $map));
          } @else {
            $less: map-merge($less, ($key: $map));
          }
        }
      }
      $less: maps-sort($less, $keys...);
      $greater: maps-sort($greater, $keys...);
      @return map-merge(map-merge($less, $equal), $greater);
    } @else {
      $seed-map: nth($maps, ceil(length($maps) / 2));
      $seed-value: map-get-nested($seed-map, $keys...);
      @each $map in $maps {
        $curr-value: map-get-nested($map, $keys...);
        @if $curr-value == $seed-value {
          $equal: append($equal, $map);
        } @else if $curr-value < $seed-value {
          @if $maps-sort-dir == 'asc' {
            $less: append($less, $map);
          } @else {
            $greater: append($greater, $map);
          }
        } @else {
          @if $maps-sort-dir == 'asc' {
            $greater: append($greater, $map);
          } @else {
            $less: append($less, $map);
          }
        }
      }
      $less: maps-sort($less, $keys...);
      $greater: maps-sort($greater, $keys...);
      @return join(join($less, $equal), $greater);
    }
  }
  @return $maps;
}

@function list-map-check($list) {
  @if length($list) == 2 and length(nth($list, 1)) == 1 {
    @return append((), $list, 'comma');
  }
  @return $list;
}
@function list-map-keys($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: ();
  @each $tuple in $list {
    $output: append($output, tuple-key($tuple), 'comma');
  }
  @return $output;
}
@function list-map-values($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: ();
  @each $tuple in $list {
    $output: append($output, tuple-value($tuple), 'comma');
  }
  @return $output;
}
@function list-map-has-key($list, $key) {
  $list: list-map-check($list);
  @each $tuple in $list {
    @if tuple-key($tuple) == $key {
      @return true;
    }
  }
  @return false;
}
@function list-map-get($list, $key) {
  $list: list-map-check($list);
  @each $tuple in $list {
    @if tuple-key($tuple) == $key {
      @return tuple-value($tuple);
    }
  }
  @return null;
}
@function list-map-merge($list1, $list2) {
  $list1: list-map-check($list1);
  $list2: list-map-check($list2);
  $keys1: list-map-keys($list1);
  @each $tuple in $list2 {
    $index: index($keys1, tuple-key($tuple));
    @if $index {
      $list1: set-nth($list1, $index, $tuple);
    } @else {
      $list1: append($list1, $tuple, 'comma');
    }
  }
  @return $list1;
}
@function list-map-remove($list, $keys...) {
  $list: list-map-check($list);
  $output: ();
  @each $tuple in $list {
    @if not index($keys, tuple-key($tuple)) {
      $output: append($output, $tuple, 'comma');
    }
  }
  @return $output;
}
@function list-map-get-nested($list, $keys...) {
  @each $key in $keys {
    @if type-of($list) != 'list' {
      @return $list;
    }
    $list: list-map-get($list, $key);
  }
  @return $list;
}
@function list-map-merge-nested($list, $kv...) {
  $list: list-map-check($list);
  $kv-length: length($kv);
  $key-length: $kv-length - 1;
  $value: nth($kv, $kv-length);
  $value-is-list: type-of($value) == 'list';
  @if $key-length == 0 {
    $value: list-map-merge($list, if($value-is-list, $value, append((), $value (), 'comma')));
  } @else {
    @for $i from if($value-is-list, 0, 1) through $key-length {
      $new: if($i == 0, $value, append((), nth($kv, $kv-length - $i) $value, 'comma'));
      $old: if($i == $key-length, $list, list-map-get-nested($list, slice($kv, 1, $key-length - $i)...) or ());
      $value: if(type-of($old) == 'list', list-map-merge($old, $new), $new);
    }
  }
  @return $value;
}
@function list-map-prev-key($list, $key) {
  $list: list-map-check($list);
  $keys: list-map-keys($list);
  @return nth($keys, index($keys, $key) - 1);
}
@function list-map-next-key($list, $key) {
  $list: list-map-check($list);
  $keys: list-map-keys($list);
  @return nth($keys, index($keys, $key) + 1);
}
@function list-map-inspect($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: '(';
  $i: 1;
  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    } @else {
      $key: tuple-key($tuple);
      $value: tuple-value($tuple);
      $output: $output + '#{$key} ' + if(type-of($value) == 'list', '#{list-map-inspect($value)}', '#{$value}');
    }
    @if $i < length(list-map-keys($list)) {
      $output: $output + ', ';
    }
    $i: $i + 1;
  }
  @return $output + ')';
}
@function list-map-pretty($list, $level: 1) {
  $tab: '  ';
  $cr: '
';
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $indent: $tab; $outdent: $tab;
  @for $n from 1 through $level {
    $indent: $indent + $tab;
  }
  @for $n from 1 through $level - 1 {
    $outdent: $outdent + $tab;
  }
  $output: '(' + $cr + $indent;
  $i: 1;
  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    } @else {
      $key: nth($tuple, 1); $value: nth($tuple, 2);
      @if type-of($value) == 'list' {
        $output: $output + '#{$key} #{list-map-pretty($value, $level+1)}';
      } @else {
        $output: $output + '#{$key} #{$value}';
      }
    }
    @if $i < length(list-map-keys($list)) {
      $output: $output + ',' + $cr + $indent;
    }
    $i: $i + 1;
  }
  @return $output + $cr + $outdent + ')';
}
$list-map-sort-dir: 'asc';
@function list-map-sort($list-map, $keys...) {
  @if length($keys) < 1 {
    @return $list-map;
  }
  $list-map: list-map-check($list-map);
  @if length($list-map) > 1 {
    $less: ();
    $equal: ();
    $greater: ();
    $seed: nth($list-map, ceil(length($list-map) / 2));
    $seed-value: list-map-get-nested(nth($seed, 2), $keys...);
    @each $item in $list-map {
      $item-value: list-map-get-nested(nth($item, 2), $keys...);
      @if $list-map-sort-dir == 'asc' {
        @if $item-value == $seed-value {
          $equal: append($equal, $item, 'comma');
        } @else if $item-value < $seed-value {
          $less: append($less, $item, 'comma');
        } @else {
          $greater: append($greater, $item, 'comma');
        }
      } @else {
        @if $item-value == $seed-value {
          $equal: append($equal, $item, 'comma');
        } @else if $item-value > $seed-value {
          $less: append($less, $item, 'comma');
        } @else {
          $greater: append($greater, $item, 'comma');
        }
      }
    }
    @return join(join(map-sort($less, $keys...), $equal), list-map-sort($greater, $keys...));
  }
  @return $list-map;
}
@function list-map-json($list...) {
  $list: if(length($list) == 1, list-map-check($list...), list-map-check($list));
  $output: '{ ';
  $i: 1;
  @each $tuple in $list {
    @if length($tuple) != 2 {
      $output: $output + '#{$tuple}';
    } @else {
      $key: nth($tuple, 1);
      $value: nth($tuple, 2);
      @if type-of($value) == 'list' {
        $output: $output + '"#{$key}": #{list-map-json($value)}';
      } @else if type-of($value) == 'number' {
        $value: if(unitless($value), $value, '"#{$value}"');
        $output: $output + '"#{$key}": #{$value}';
      } @else {
        $value: if(type-of($value) == 'bool', $value, '"#{$value}"');
        $output: $output + '"#{$key}": #{$value}';
      }
    }
    @if $i < length(list-map-keys($list)) {
      $output: $output + ', ';
    }
    $i: $i + 1;
  }
  @return $output + ' }';
}

@function map-get-z($args...) { @return map-get-nested($args...); }
@function map-get-deep($args...) { @return map-get-nested($args...); }
@function get($args...) { @return map-get-nested($args...); }
@function map-merge-z($args...) { @return map-merge-nested($args...); }
@function map-merge-deep($args...) { @return map-merge-nested($args...); }
@function merge($args...) { @return map-merge-nested($args...); }
@function map-set-nested($args...) { @return map-merge-nested($args...); }
@function map-set-z($args...) { @return map-merge-nested($args...); }
@function map-set-deep($args...) { @return map-merge-nested($args...); }
@function set($args...) { @return map-merge-nested($args...); }
@function list-get($args...) { @return list-map-get-nested($args...); }
@function list-merge($args...) { @return list-map-merge-nested($args...); }
@function list-set($args...) { @return list-map-merge-nested($args...); }
