.map-merge {
  /* ERROR when $map1 is not a map */
  expect: "ERROR: argument `$map1` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map1` of `map-merge($map1, $keys-and-map2...)` must be a map";
  /* ERROR when $map2 is not a map */
  expect: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  /* ERROR when no $keys-and-map2... provided */
  expect: "ERROR: rest-argument `$keys-and-map2...` of map-merge($map1, $keys-and-map2...) is missing";
  result: "ERROR: rest-argument `$keys-and-map2...` of map-merge($map1, $keys-and-map2...) is missing";
  /* @return $map1 if $map2 is empty */
  expect: "(alpha: 1, beta: 2, gamma: 3)";
  result: "(alpha: 1, beta: 2, gamma: 3)";
  /* @return $map2 if $map1 is empty */
  expect: "(gamma: 4)";
  result: "(gamma: 4)";
  /* @return merge, $map2 -> $map1 at $keys... */
  expect: "(alpha: 1, beta: 2, gamma: 4)";
  result: "(alpha: 1, beta: 2, gamma: 4)";
  expect: "(alpha: 4)";
  result: "(alpha: 4)";
  expect: "(alpha: (beta: 4, epsilon: 5))";
  result: "(alpha: (beta: 4, epsilon: 5))";
  expect: "(alpha: (beta: (gamma: 4, delta: 4), epsilon: 5))";
  result: "(alpha: (beta: (gamma: 4, delta: 4), epsilon: 5))";
  /* @return merge, $map2 -> $map1, creating intermediate keys if necessary */
  expect: "(foo: (bar: (baz: 2)))";
  result: "(foo: (bar: (baz: 2)))";
  expect: "(alpha: 1, beta: 2, gamma: (foo: (bar: (baz: 2))))";
  result: "(alpha: 1, beta: 2, gamma: (foo: (bar: (baz: 2))))";
}
