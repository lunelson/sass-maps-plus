@import '@lunelson/sass-throw/index';
@import '../index';

$throw-catch: true;
$map: ( alpha: 1, beta: 2, gamma: 3 );
$map-nested: (
  alpha: (
    beta: (
      gamma: 3,
      delta: 4,
    ),
    epsilon: 5,
  ),
);

.map-omit {
  /* ERROR if $map is not a map */
  expect: "ERROR: argument `$map` of map-omit($map, $keys...) must be a map";
  result: quote(inspect(map-omit(null, foo)));
  result: quote(inspect(map-omit('foo', foo)));
  /* @return empty map if $map is empty */
  expect: "()";
  result: quote(inspect(map-omit((), foo)));
  /* @return input $map if no $keys found or length($keys) == 0 */
  expect: "(alpha: 1, beta: 2, gamma: 3)";
  result: quote(inspect(map-omit($map)));
  result: quote(inspect(map-omit($map, foo)));
  /* @return new map with found $keys removed */
  expect: "(alpha: 1, gamma: 3)";
  result: quote(inspect(map-omit($map, beta)));
  expect: "(alpha: 1)";
  result: quote(inspect(map-omit($map, beta, gamma)));
}
