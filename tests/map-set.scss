@import '@lunelson/sass-throw/index';
@import '../index';

$sass-throw-catch: true;
$map: ( alpha: 1, beta: 2, gamma: 3 );
$map-nested: (
  alpha: (
    beta: (
      gamma: 3,
      delta: 4,
    ),
    epsilon: 5,
  ),
);

.map-set {
  /* errors */
  expect: "ERROR: argument $map in map-set($map, $keys...) is not a map";
  result: quote(inspect(map-set(null, (gamma: 4))));
  expect: "ERROR: argument $map in map-set($map, $keys...) is not a map";
  result: quote(inspect(map-set((), (gamma: 4))));
  expect: "ERROR: rest-argument $keys-and-value in map-set($map, $keys-and-value...) not provided";
  result: quote(inspect(map-set($map)));
  expect: "ERROR: at least one $key required in map-set($map, $keys-and-value...)";
  result: quote(inspect(map-set($map, ())));
  /* normal */
  expect: "(alpha: 1, beta: 2, gamma: 4)";
  result: quote(inspect(map-set($map, gamma, 4)));
  expect: "(alpha: 4)";
  result: quote(inspect(map-set($map-nested, alpha, 4)));
  expect: "(alpha: (beta: 4, epsilon: 5))";
  result: quote(inspect(map-set($map-nested, alpha, beta, 4)));
  expect: "(alpha: (beta: 4))";
  result: quote(inspect(map-set($map-nested, alpha, (beta: 4))));
  expect: "(alpha: (beta: (gamma: 4, delta: 4), epsilon: 5))";
  result: quote(inspect(map-set($map-nested, alpha, beta, gamma, 4)));
  expect: "(alpha: (beta: (gamma: 4), epsilon: 5))";
  result: quote(inspect(map-set($map-nested, alpha, beta, (gamma: 4))));
}
