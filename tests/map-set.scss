@import '@lunelson/sass-throw/index';
@import '../index';

$sass-throw-catch: true;
$map: ( alpha: 1, beta: 2, gamma: 3 );
$map-nested: (
  alpha: (
    beta: (
      gamma: 3,
      delta: 4,
    ),
    epsilon: 5,
  ),
);

.map-set {

  /* ERROR when $map is not a map */
  expect: "ERROR: argument `$map` of `map-set($map, $keys...)` is not a map";
  result: quote(inspect(map-set(null, (gamma: 4))));
  result: quote(inspect(map-set('hello world', (gamma: 4))));

  /* ERROR when $keys-and-value length is 0 */
  expect: "ERROR: rest-argument `$keys-and-value` of `map-set($map, $keys-and-value...)` is missing";
  result: quote(inspect(map-set($map)));

  /* ERROR when $keys length is 0 */
  expect: "ERROR: at least one `$key` argument required in `map-set($map, $keys-and-value...)`";
  result: quote(inspect(map-set((), (gamma: 4))));
  result: quote(inspect(map-set($map, 4)));
  result: quote(inspect(map-set($map, ())));

  /* @return map with $value set at $key*/
  expect: "(alpha: 1, beta: 2, gamma: 4)";
  result: quote(inspect(map-set($map, gamma, 4)));

  /* @return map with $value set at nested $keys path*/
  expect: "(alpha: 4)";
  result: quote(inspect(map-set($map-nested, alpha, 4)));
  expect: "(alpha: (beta: 4, epsilon: 5))";
  result: quote(inspect(map-set($map-nested, alpha, beta, 4)));
  expect: "(alpha: (beta: 4))";
  result: quote(inspect(map-set($map-nested, alpha, (beta: 4))));
  expect: "(alpha: (beta: (gamma: 4, delta: 4), epsilon: 5))";
  result: quote(inspect(map-set($map-nested, alpha, beta, gamma, 4)));
  expect: "(alpha: (beta: (gamma: 4), epsilon: 5))";
  result: quote(inspect(map-set($map-nested, alpha, beta, (gamma: 4))));

  /* @return set $value, creating intermediate keys if necessary */
  expect: "(foo: (bar: (baz: 2)))";
  result: quote(inspect(map-set((), foo, bar, (baz: 2))));
  result: quote(inspect(map-set((), foo, bar, baz, 2)));
  expect: "(alpha: 1, beta: 2, gamma: (foo: (bar: (baz: 2))))";
  result: quote(inspect(map-set($map, gamma, foo, bar, (baz: 2))));
  result: quote(inspect(map-set($map, gamma, foo, bar, baz, 2)));
}
