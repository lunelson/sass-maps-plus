@import '@lunelson/sass-throw/index';
@import '../index';

$sass-throw-catch: true;
$map: ( alpha: 1, beta: 2, gamma: 3 );
$map-nested: (
  alpha: (
    beta: (
      gamma: 3,
      delta: 4,
    ),
    epsilon: 5,
  ),
);

.map-merge {

  /* ERROR when $map1 is not a map */
  expect: "ERROR: argument `$map1` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: quote(inspect(map-merge(null, (gamma: 4))));

  /* ERROR when $map2 is not a map */
  expect: "ERROR: argument `$map2` of `map-merge($map1, $keys-and-map2...)` must be a map";
  result: quote(inspect(map-merge((), 4)));
  result: quote(inspect(map-merge($map, 4)));
  result: quote(inspect(map-merge($map, gamma, 4)));
  result: quote(inspect(map-merge($map-nested, alpha, 4)));
  result: quote(inspect(map-merge($map-nested, alpha, beta, 4)));
  result: quote(inspect(map-merge($map-nested, alpha, beta, gamma, 4)));

  /* ERROR when no $keys-and-map2... provided */
  expect: "ERROR: rest-argument `$keys-and-map2...` of map-merge($map1, $keys-and-map2...) is missing";
  result: quote(inspect(map-merge($map)));

  /* @return $map1 if $map2 is empty */
  expect:  "(alpha: 1, beta: 2, gamma: 3)";
  result: quote(inspect(map-merge($map, ())));

  /* @return $map2 if $map1 is empty */
  expect:  "(gamma: 4)";
  result: quote(inspect(map-merge((), (gamma: 4))));

  /* @return merge of $map2 against $map1 value at $keys... */
  expect: "(alpha: 1, beta: 2, gamma: 4)";
  result: quote(inspect(map-merge($map, (gamma: 4))));
  expect: "(alpha: 4)";
  result: quote(inspect(map-merge($map-nested, (alpha: 4))));
  expect: "(alpha: (beta: 4, epsilon: 5))";
  result: quote(inspect(map-merge($map-nested, alpha, (beta: 4))));
  expect: "(alpha: (beta: (gamma: 4, delta: 4), epsilon: 5))";
  result: quote(inspect(map-merge($map-nested, alpha, beta, (gamma: 4))));
}
