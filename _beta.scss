//  _          _
// | |        | |
// | |__   ___| |_ __ _
// | '_ \ / _ \ __/ _` |
// | |_) |  __/ || (_| |
// |_.__/ \___|\__\__,_|




/* ==========================================================================
   API TODO ADDITIONS
   ========================================================================== */



@function enum($n) {
  $h: abs($n) % 100; $t: $h % 10;
  @if $h > 3 and $h < 21 { @return #{$n}th; }
  @return #{$n}#{if($h == 1, 'st', if($t == 2, 'nd', if($t == 3, 'rd', 'th')))};
}

@function contains-duplicates($list) {
  $holding: ();
  @each $item in $list {
    @if index($holding, $item) { @return true; }
    $holding: append($holding, $item);
  }
  @return false;
}

/// An equivalent of `zip` function but for maps.
/// Takes two lists, the first for keys, second for values.
/// @param {List} $keys - Keys for map
/// @param {List} $values - Values for map
/// @return {Map} Freshly created map
/// @see http://sass-lang.com/documentation/Sass/Script/Functions.html#zip-instance_method
@function map-zip($keys, $values) {
  $l-keys: length($keys);
  $l-values: length($values);
  $min: min($l-keys, $l-values);
  $map: ();

  @if $l-keys != $l-values {
    @warn "There are #{$l-keys} key(s) for #{$l-values} value(s) in the map for `map-zip`. "
        + "Resulting map will only have #{$min} pairs.";
  }

  @if $min == 0 {
    @return $map;
  }

  @for $i from 1 through $min {
    $map: map-merge($map, (nth($keys, $i): nth($values, $i)));
  }

  @return $map;
}

/// Change key case of all keys in map
/// @param {Map} $map
/// @param {String} $case ("lower-case") - Either `lower-case` or `upper-case`
/// @return {Map}
@function map-change-key-case($map, $case: "lower-case") {
  $values: "lower-case", "upper-case";

  @if index($values, $case) == null {
    // Changing `@error` to `@warn` because GitHub syntax highlighter is a mess...
    @warn "Argument `$case` for `map-change-key-case` must be one of: #{$values}.";
  }

  @each $key, $value in $map {
    $new-key: call("to-" + $case, $key);

    @if $key != $new-key {
      $map: map-merge(map-remove($map, $key), (
        $new-key: $value
      ));
    }
  }

  @return $map;
}
/// Compute the maximum depth of a map
/// @param {Map} $map
/// @return {Number} max depth of `$map`
@function map-depth($map) {
  $level: 1;

  @each $key, $value in $map {
    @if type-of($value) == "map" {
      $level: max(map-depth($value) + 1, $level);
    }
  }

  @return $level;
}

/// Prints a map as a CSS rule
/// @access private
/// @param {Map} $map
@mixin debug-map($map) {
  @at-root {
    @debug-map {
      __toString__: inspect($map);
      __length__: length($map);
      __depth__: if(function-exists("map-depth"), map-depth($map), null);
      __keys__: map-keys($map);
      __properties__ {
        @each $key, $value in $map {
          #{'(' + type-of($value) + ') ' + $key}: inspect($value);
        }
      }
    }
  }
}
